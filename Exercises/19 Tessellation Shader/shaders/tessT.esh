#version 400
 
layout (triangles) in;
out vec3 colorToFS;
in vec4 patchPositionToTES[];
in vec3 patchColorToTES[];

uniform float cameraZ;
uniform mat4 projectionMatrix, viewMatrix, modelMatrix;

void main1() {
	float u = gl_TessCoord.x;
	float v = gl_TessCoord.y;
	float w = gl_TessCoord.z;
	vec4 p0 = u * patchPositionToTES[0];
	vec4 p1 = v * patchPositionToTES[1];
	vec4 p2 = w * patchPositionToTES[2];
	vec4 middlePosition = p0 + p1 + p2;
	gl_Position = projectionMatrix * viewMatrix * modelMatrix * middlePosition;
	
	vec4 worldPosition = modelMatrix * middlePosition;	
	vec3 unitNormal = vec3(0, 0, 1);
	vec3 lightPosition = vec3(0, 0, 2);
	vec3 vertexToLight = normalize(lightPosition - worldPosition.xyz);
	vec3 camera = vec3(0, 0, cameraZ);
	vec3 vertexToCamera = normalize(camera - worldPosition.xyz);
    vec3 reflected = normalize(2 * unitNormal * dot(unitNormal, vertexToLight) - vertexToLight);
    float exponent = 16;
    float factorS = clamp(pow(dot(reflected, vertexToCamera), exponent), 0, 1);
	
	vec3 c0 = u * patchColorToTES[0];
	vec3 c1 = v * patchColorToTES[1];
	vec3 c2 = w * patchColorToTES[2];
	vec3 middleColor = c0 + c1 + c2;
	vec3 ambientColor = middleColor / 2;
	colorToFS = clamp(ambientColor + middleColor * factorS, 0, 1);
}

void main() {
	// gl_Position = vec4((2 * gl_TessCoord.x) - 1, (2 * gl_TessCoord.y) - 1, 0, 1);
	gl_Position = vec4(gl_TessCoord.x, gl_TessCoord.y, 0, 1);
	colorToFS = vec3(gl_TessCoord);
}
